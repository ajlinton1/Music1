//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicPlayerWeb
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MusicEntities : DbContext
    {
        public MusicEntities()
            : base("name=MusicEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ARTIST> ARTIST { get; set; }
        public DbSet<SONG> SONG { get; set; }
        public DbSet<Sync> Sync { get; set; }
        public DbSet<GetRandomUploadedSongs> GetRandomUploadedSongs { get; set; }
        public DbSet<GetSongPlayHistory> GetSongPlayHistory { get; set; }
        public DbSet<MellowSongs> MellowSongs { get; set; }
        public DbSet<MellowSongs1> MellowSongs1 { get; set; }
        public DbSet<RandomSongs> RandomSongs { get; set; }
        public DbSet<RecentSongs> RecentSongs { get; set; }
        public DbSet<SongsV> SongsV { get; set; }
    
        public virtual ObjectResult<GetRadioSongs_Result> GetRadioSongs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRadioSongs_Result>("GetRadioSongs");
        }
    
        public virtual ObjectResult<GetRandomSong_Result> GetRandomSong()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRandomSong_Result>("GetRandomSong");
        }
    
        public virtual ObjectResult<InsertSong_Result> InsertSong(string title, string artist, string album, string genre, Nullable<long> duration, Nullable<long> filesize, Nullable<int> rating, string comments, string location, byte[] hash, ObjectParameter id)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var artistParameter = artist != null ?
                new ObjectParameter("artist", artist) :
                new ObjectParameter("artist", typeof(string));
    
            var albumParameter = album != null ?
                new ObjectParameter("album", album) :
                new ObjectParameter("album", typeof(string));
    
            var genreParameter = genre != null ?
                new ObjectParameter("genre", genre) :
                new ObjectParameter("genre", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(long));
    
            var filesizeParameter = filesize.HasValue ?
                new ObjectParameter("filesize", filesize) :
                new ObjectParameter("filesize", typeof(long));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("rating", rating) :
                new ObjectParameter("rating", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var hashParameter = hash != null ?
                new ObjectParameter("hash", hash) :
                new ObjectParameter("hash", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertSong_Result>("InsertSong", titleParameter, artistParameter, albumParameter, genreParameter, durationParameter, filesizeParameter, ratingParameter, commentsParameter, locationParameter, hashParameter, id);
        }
    
        public virtual ObjectResult<LoadMusicByArtist_Result> LoadMusicByArtist(string artist)
        {
            var artistParameter = artist != null ?
                new ObjectParameter("Artist", artist) :
                new ObjectParameter("Artist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadMusicByArtist_Result>("LoadMusicByArtist", artistParameter);
        }
    
        public virtual ObjectResult<LoadNewMusic_Result> LoadNewMusic()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadNewMusic_Result>("LoadNewMusic");
        }
    }
}
