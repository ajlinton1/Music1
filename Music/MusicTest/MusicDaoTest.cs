// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Configuration;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data.Linq;
using System.Linq;
using Music;

namespace MusicTest
{
    /// <summary>
    ///This is a test class for Music.MusicDao and is intended
    ///to contain all Music.MusicDao Unit Tests
    ///</summary>
    [TestClass()]
    public class MusicDaoTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for IndentifyArtists ()
        ///</summary>
        [TestMethod()]
        public void IndentifyArtistsTest()
        {
            MusicDao target = new MusicDao();

            String[] artists = target.IndentifyArtists();
            for (int i = 0; i < artists.Length; i++)
            {
                Console.WriteLine(artists[i]);
            }
        }

        [TestMethod()]
        public void GetConfigInfo()
        {
            try
            {
                MusicDao musicDao = new MusicDao();

                NameValueCollection appSettings = ConfigurationManager.AppSettings;
                String value1 = appSettings["Setting1"];
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
        }

        [TestMethod]
        public void CrawlFoldersWMATest()
        {
            MusicDao musicDao = new MusicDao();
            musicDao.CrawlFoldersWMA();
        }

        [TestMethod]
        public void CrawlFoldersMp3Test()
        {
            MusicDao musicDao = new MusicDao();
            musicDao.CrawlFoldersMp3();
        }

        [TestMethod]
        public void PickRandomSong()
        {
            try
            {
                MusicDao musicDao = new MusicDao();
                musicDao.Initialize();
                SONG song = musicDao.PickRandomSong();
                Console.WriteLine(song.TITLE);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
        }

        [TestMethod]
        public void RandomFillTest()
        {
            try
            {
                MusicDao musicDao = new MusicDao();
                musicDao.Initialize();
                musicDao.RandomFill();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
                throw;
            }
        }

        [TestMethod()]
        public void UpdateArtistsTest()
        {
            MusicDao target = new MusicDao();

            target.UpdateArtists();
        }

        [TestMethod()]
        public void InsertSongTest()
        {
            try
            {
                MusicDao musicDao = new MusicDao();
                musicDao.Initialize();
                SONG song = musicDao.PickRandomSong();
                song.TITLE = "This is a test";
                musicDao.InsertSong(song.TITLE, song.ARTIST, song.ALBUM, song.GENRE, song.DURATION, song.BITRATE, song.FILESIZE, song.LOCATION);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
                throw;
            }
        }

        [TestMethod()]
        public void TypedDataContext()
        {
            try
            {
                var dataContext = new DataClasses1DataContext("Data Source=dedsql004.mydbserver.net, 10030;Initial Catalog=mycruitercom;User Id=mycruitercom;Password=mycYRs8a;");
                Table<SONG> songs = dataContext.SONGs;

                IQueryable<SONG> query = from s in songs
                                         where s.TITLE.Contains("Kiss")
                                         select s;
                foreach (SONG song in query)
                {
                    Console.WriteLine(song.TITLE);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
                throw;
            }
        }
    }


}
